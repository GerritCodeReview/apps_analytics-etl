{
  "comments": [
    {
      "key": {
        "uuid": "3a3e8275_aa907e90",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2019-11-28T22:48:35Z",
      "side": 1,
      "message": "a relational DB",
      "range": {
        "startLine": 7,
        "startChar": 37,
        "endLine": 7,
        "endChar": 43
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3520195_049cd819",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-11-29T15:29:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a3e8275_aa907e90",
      "range": {
        "startLine": 7,
        "startChar": 37,
        "endLine": 7,
        "endChar": 43
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b116f792_f6515e88",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2019-11-28T22:48:35Z",
      "side": 1,
      "message": "What about? \"Allowing the storage of....\"",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 17
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64753d3a_b300015b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-11-29T15:29:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b116f792_f6515e88",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 17
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c17a5c9_d83473c7",
        "filename": "auditlog/src/main/scala/com/gerritforge/analytics/auditlog/job/Main.scala",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2019-11-29T01:25:54Z",
      "side": 1,
      "message": "What about wrapping this all saveToDB in a for comprehension, so we avoid to call a \"get\" on an option (i.e.: \"config.jdbcConnection.get\")?",
      "range": {
        "startLine": 87,
        "startChar": 10,
        "endLine": 90,
        "endChar": 101
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf35372c_27a91e2f",
        "filename": "auditlog/src/main/scala/com/gerritforge/analytics/auditlog/job/Main.scala",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-11-29T15:29:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c17a5c9_d83473c7",
      "range": {
        "startLine": 87,
        "startChar": 10,
        "endLine": 90,
        "endChar": 101
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bacc45b0_7a63070d",
        "filename": "common/src/main/scala/com/gerritforge/analytics/common/api/SaveMode.scala",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2019-11-28T22:53:10Z",
      "side": 1,
      "message": "I believe we should either totally abstract the target or be more explicit, i.e.: we are explicit when we write on an Lucene based engine (saveToEs) but general when we write on a relation database (saveToDb).",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 36
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31cb35ec_c748031c",
        "filename": "common/src/main/scala/com/gerritforge/analytics/common/api/SaveMode.scala",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-11-29T15:53:34Z",
      "side": 1,
      "message": "I\u0027m not sure that I fully understand. To totally abstract the target we would have to change our approach because the current code is using implicit classes, I\u0027m fine with doing that but this should be done in a separate change. About not being explicit about saveToDb idea is that we can store to any relational database which is supporting jdbc. WDYT how we can be more explicit about saveToDb?",
      "parentUuid": "bacc45b0_7a63070d",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 36
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3003741_a05c84f6",
        "filename": "common/src/main/scala/com/gerritforge/analytics/common/api/SaveMode.scala",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2019-11-29T21:06:50Z",
      "side": 1,
      "message": "Sorry let me give another go, I read my comment and it is not that clear ðŸ˜Š\n\nI think there are 2 questions here:\n1) saveToES Vs saveToDb: in the first case (saveToES) we expose the fact we are writing on ES, but I believe we shouldn\u0027t. People could potentially write in Splunk, DataDog,... In the second case (saveToDb) we try to be generic, and we abstract the relational DB we are writing into. I\u0027m happy with both the directions as long as we are consistent, WDYT?\n \n2) if we decide to have multiple \"saveTo\" flags, saveToDb should probably be saveToRelationalDb? If we decide to expose the backend type we are writing into, I believe we should be explicit. Say we will allow people to write on MongoDB. On the other end, we could decide not to expose the target implementation, hence we should probably have a more generic parameter \"saveTo\u003d(pg|mysal|es|splunk)\" to select the target.\n\nHope my comment makes more sense.",
      "parentUuid": "31cb35ec_c748031c",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 36
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5e64f37_1ff3f06d",
        "filename": "common/src/main/scala/com/gerritforge/analytics/common/api/SaveMode.scala",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-12-02T09:59:50Z",
      "side": 1,
      "message": "You are right it should be saveToRelationalDb instead of saveToDb. I\u0027m not sure how ElasticSearch, Splunk and DataDog are related together. They require different api calls, different data preparation and different configuration. That\u0027s why we cannot combine them to a single saveTo.. flag. On the other hand when we are using jdbc we have common settings, data preparations and configuration that\u0027s why from spark perspective it doesn\u0027t make any difference if you are writing to PostgreSql, MySql or Oracle it\u0027s the same technology.\n\nI understand your point I also prefer to have approach where you have a single method called \"save\" and inside this method based on the configuration we are deciding where we want to write(target). But this project is not using config file it\u0027s based on command line params and it\u0027s using scopt framework. Moving from scopt to config file it\u0027s a incompatible change and it requires to version and release current code to allow current users to continue with the setup they have.\n\nAnother thing is that current implementation is based on implicit classes and we are not defining interfaces for any operation because the approach is different. I was following original design to have less moving parts if we all agree that we prefer to use interfaces I\u0027m happy to refactor current code in following change.\n\nAbout \"saveTo\u003d(pg|mysal|es|splunk)\" I was trying to do that but it looks like that in scopt only commands can have children options this means that if you want to have separate options per \u0027writer\u0027 there is no other way. By separate options I mean that ES needs just index name but for Relational database we need also jdbc string. Again because we are not using config files we have to pass all params from command line",
      "parentUuid": "c3003741_a05c84f6",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 21,
        "endChar": 36
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67911792_9204edf7",
        "filename": "common/src/main/scala/com/gerritforge/analytics/infrastructure/dbSparkWriter.scala",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2019-11-29T01:25:54Z",
      "side": 1,
      "message": "Since we are here in the relational database context, I found a bit confusing using a variable with prefix \"newIndex\" as a table name.\n\nShall we just call it \"newTableName\" or something similar?",
      "range": {
        "startLine": 39,
        "startChar": 8,
        "endLine": 39,
        "endChar": 28
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd40c11f_d1fe3bf0",
        "filename": "common/src/main/scala/com/gerritforge/analytics/infrastructure/dbSparkWriter.scala",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-11-29T15:29:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67911792_9204edf7",
      "range": {
        "startLine": 39,
        "startChar": 8,
        "endLine": 39,
        "endChar": 28
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e937d43e_b027c402",
        "filename": "gitcommits/src/main/scala/com/gerritforge/analytics/gitcommits/model/GerritEndpointConfig.scala",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2019-11-28T22:48:35Z",
      "side": 1,
      "message": "Seems like we have a mix bag of configurations (ES and RD) which are mutually exclusive. Shall we abstract the the \"destination configuration\" so we won\u0027t have mix ES and RD parameters?",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 33,
        "endChar": 43
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fcd9d09_1f332bee",
        "filename": "gitcommits/src/main/scala/com/gerritforge/analytics/gitcommits/model/GerritEndpointConfig.scala",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-11-29T15:29:40Z",
      "side": 1,
      "message": "I agree I was planning to do that in following change, but let me have a look if it is possible without massive refactoring",
      "parentUuid": "e937d43e_b027c402",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 33,
        "endChar": 43
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e6cf7f6_6d5d3a8e",
        "filename": "gitcommits/src/main/scala/com/gerritforge/analytics/gitcommits/model/GerritEndpointConfig.scala",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2019-11-29T21:06:50Z",
      "side": 1,
      "message": "I agree we could do it in a separate change. As I was suggesting in this (https://gerrit-review.googlesource.com/c/apps/analytics-etl/+/247054/3#message-7cfd101ca845ba07e6bd31a4f699f197cf4bff5b) comment, what about splitting this change set in 2, i.e.: abstraction of the target and relational DB target implementation?\n\nI\u0027d personally start from start with the \"abstraction of the target\" to make sure we provide a clean interface and avoid making all the configuration optional as in here (https://gerrit-review.googlesource.com/c/apps/analytics-etl/+/247054/3/auditlog/src/main/scala/com/gerritforge/analytics/auditlog/model/AuditLogETLConfig.scala).\n\nEither way the order is ok for me.",
      "parentUuid": "8fcd9d09_1f332bee",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 33,
        "endChar": 43
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "749a4bb3_0cea5cdb",
        "filename": "gitcommits/src/main/scala/com/gerritforge/analytics/gitcommits/model/GerritEndpointConfig.scala",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-12-03T18:05:35Z",
      "side": 1,
      "message": "In following change I have proposed solution for that with lightbend config[1]. Basically idea is to move part of the configurations to application.conf and keep only commands from command line. Configuration options are going to grow and setting all params from command line becomes problematic and error prone. Following change is a first step in this direction.\n\n[1]https://github.com/lightbend/config",
      "parentUuid": "5e6cf7f6_6d5d3a8e",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 33,
        "endChar": 43
      },
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5bbcbef_e77e85b1",
        "filename": "project/SharedSettings.scala",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2019-11-28T23:04:06Z",
      "side": 1,
      "message": "What are we using this for?",
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4850dfb1_125889ac",
        "filename": "project/SharedSettings.scala",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-11-29T15:29:40Z",
      "side": 1,
      "message": "It is providing try-with-resources like functionality. I\u0027m using it to manage java.sql.Statement in com.gerritforge.analytics.common.api.db.RelationalDatabaseViewOps.\nhttps://github.com/jsuereth/scala-arm",
      "parentUuid": "e5bbcbef_e77e85b1",
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "462cd19b_0215f025",
        "filename": "project/SharedSettings.scala",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2019-11-29T21:06:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4850dfb1_125889ac",
      "revId": "c695f1a9e2f3cfd5b68c586055661de63bcc69b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}