{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d5111b74_c967edb4",
        "filename": "gitcommits/src/main/scala/com/gerritforge/analytics/gitcommits/engine/GerritAnalyticsTransformations.scala",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2025-01-03T17:41:33Z",
      "side": 1,
      "message": "I’m wondering whether we should keep this as a separate field or integrate it into the `branches` field.\n\nWith the current implementation:\n* `branches` is only populated when importing *from URL* **AND** specify the `extract-branches` option\n* `project_revision` is only populated when importing *from manifest*\n\nI’m inclined to keep them as separate fields to avoid inconsistent behavior in `branches` depending on the import method.\n\nFurthermore the source of information is different (manifest Vs analytics plugin response).",
      "range": {
        "startLine": 132,
        "startChar": 30,
        "endLine": 132,
        "endChar": 46
      },
      "revId": "a4b35e269d157d0fe550a2e3821e26de42e10fc4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9459487d_521e2ae6",
        "filename": "gitcommits/src/main/scala/com/gerritforge/analytics/gitcommits/engine/GerritAnalyticsTransformations.scala",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2025-01-14T11:02:54Z",
      "side": 1,
      "message": "The `revision` extracted from the manifest, could be used to populate the already existing `branches` field (it will be an array of one element).\n\nIf the manifest has `project\u003dfoo revision\u003dbar`, the stats extracted for project foo will be for the branch bar, so I think we could reuse that rather than insert a new field.\n\nThe only thing I don\u0027t like is that the word `branch` is restrictive/misleading, since revision could be a `tag`, a `sha1`, etc.\n\nHowever that value is already passed as:\n\n```--branch -f extract results only for a specific branch```\n\nto the `analytics` plugin, so kinda crossed that bridge already.\n\nI would suggest to have the `analytics` plugin just return the value that was passed in as part of the payload (and perhaps re-consider the name of the field).\n\nWDYT?\n\n@luca.milanesio@gmail.com, @ponch78@gmail.com",
      "parentUuid": "d5111b74_c967edb4",
      "range": {
        "startLine": 132,
        "startChar": 30,
        "endLine": 132,
        "endChar": 46
      },
      "revId": "a4b35e269d157d0fe550a2e3821e26de42e10fc4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca03d6e2_89ff5372",
        "filename": "gitcommits/src/main/scala/com/gerritforge/analytics/gitcommits/engine/GerritAnalyticsTransformations.scala",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2025-01-14T15:43:29Z",
      "side": 1,
      "message": "Alternative implementation [1] in analytics.\n\n\n[1]: https://gerrit-review.googlesource.com/c/plugins/analytics/+/447614",
      "parentUuid": "9459487d_521e2ae6",
      "range": {
        "startLine": 132,
        "startChar": 30,
        "endLine": 132,
        "endChar": 46
      },
      "revId": "a4b35e269d157d0fe550a2e3821e26de42e10fc4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec6fe970_d9b1a5b7",
        "filename": "gitcommits/src/main/scala/com/gerritforge/analytics/gitcommits/engine/GerritAnalyticsTransformations.scala",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2025-01-16T09:10:40Z",
      "side": 1,
      "message": "\u003e The only thing I don\u0027t like is that the word branch is restrictive/misleading,\n\u003e since revision could be a tag, a sha1, etc.\n\nI agree, that should be `ref` and not `branch` at all. I\u0027ve added a similar comment on Change 447614.",
      "parentUuid": "ca03d6e2_89ff5372",
      "range": {
        "startLine": 132,
        "startChar": 30,
        "endLine": 132,
        "endChar": 46
      },
      "revId": "a4b35e269d157d0fe550a2e3821e26de42e10fc4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac41a5cc_95bfa0e6",
        "filename": "gitcommits/src/test/scala/com/gerritforge/analytics/GerritAnalyticsTransformationsSpec.scala",
        "patchSetId": 3
      },
      "lineNbr": 281,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2025-01-14T11:37:56Z",
      "side": 1,
      "message": "nit: is this not check redundant? For me it is already tested in line L291",
      "revId": "a4b35e269d157d0fe550a2e3821e26de42e10fc4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97aab492_a48f3643",
        "filename": "gitcommits/src/test/scala/com/gerritforge/analytics/GerritAnalyticsTransformationsSpec.scala",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2025-01-14T11:37:56Z",
      "side": 1,
      "message": "nit: is the order relevant?",
      "revId": "a4b35e269d157d0fe550a2e3821e26de42e10fc4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a4b35e269d157d0fe550a2e3821e26de42e10fc4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a4b35e269d157d0fe550a2e3821e26de42e10fc4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "a4b35e269d157d0fe550a2e3821e26de42e10fc4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a4b35e269d157d0fe550a2e3821e26de42e10fc4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=MAX","label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a4b35e269d157d0fe550a2e3821e26de42e10fc4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Want-Code-Review-From-All",
        "description": {
          "value": "A \u0027Code-Review\u0027 vote is required from all human reviewers (service users that are reviewers are ignored)."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "footer:\"Want-Code-Review: all\" -label:Code-Review\u003e\u003d1,users\u003dhuman_reviewers"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003e\u003d1,users\u003dhuman_reviewers"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"footer:\"Want-Code-Review: all\" -label:Code-Review>=1,users=human_reviewers"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["footer:\"Want-Code-Review: all\"","label:Code-Review>=1,users=human_reviewers"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review>=1,users=human_reviewers"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a4b35e269d157d0fe550a2e3821e26de42e10fc4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}